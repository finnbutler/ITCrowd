{"ast":null,"code":"import _extends2 from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"initialRouteName\",\"defaultStatus\",\"backBehavior\",\"children\",\"screenListeners\",\"screenOptions\",\"openByDefault\",\"lazy\",\"drawerContentOptions\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{createNavigatorFactory,DrawerRouter,useNavigationBuilder}from'@react-navigation/native';import*as React from'react';import warnOnce from'warn-once';import DrawerView from\"../views/DrawerView\";function DrawerNavigator(_ref){var initialRouteName=_ref.initialRouteName,defaultStatus=_ref.defaultStatus,backBehavior=_ref.backBehavior,children=_ref.children,screenListeners=_ref.screenListeners,screenOptions=_ref.screenOptions,openByDefault=_ref.openByDefault,lazy=_ref.lazy,drawerContentOptions=_ref.drawerContentOptions,rest=_objectWithoutProperties(_ref,_excluded);var defaultScreenOptions={};if(drawerContentOptions){_extends2(defaultScreenOptions,{drawerPosition:drawerContentOptions.drawerPosition,drawerType:drawerContentOptions.drawerType,swipeEdgeWidth:drawerContentOptions.edgeWidth,drawerHideStatusBarOnOpen:drawerContentOptions.hideStatusBar,keyboardDismissMode:drawerContentOptions.keyboardDismissMode,swipeMinDistance:drawerContentOptions.minSwipeDistance,overlayColor:drawerContentOptions.overlayColor,drawerStatusBarAnimation:drawerContentOptions.statusBarAnimation,gestureHandlerProps:drawerContentOptions.gestureHandlerProps});Object.keys(defaultScreenOptions).forEach(function(key){if(defaultScreenOptions[key]===undefined){delete defaultScreenOptions[key];}});warnOnce(drawerContentOptions,\"Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\"+JSON.stringify(defaultScreenOptions,null,2)+\"\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.\");}if(typeof lazy==='boolean'){defaultScreenOptions.lazy=lazy;warnOnce(true,\"Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.\");}if(typeof openByDefault==='boolean'){warnOnce(true,\"Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.\");}var _useNavigationBuilder=useNavigationBuilder(DrawerRouter,{initialRouteName:initialRouteName,defaultStatus:defaultStatus!==undefined?defaultStatus:openByDefault?'open':'closed',backBehavior:backBehavior,children:children,screenListeners:screenListeners,screenOptions:screenOptions,defaultScreenOptions:defaultScreenOptions}),state=_useNavigationBuilder.state,descriptors=_useNavigationBuilder.descriptors,navigation=_useNavigationBuilder.navigation,NavigationContent=_useNavigationBuilder.NavigationContent;return React.createElement(NavigationContent,null,React.createElement(DrawerView,_extends({},rest,{state:state,descriptors:descriptors,navigation:navigation})));}export default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"sources":["createDrawerNavigator.tsx"],"names":["rest","defaultScreenOptions","Object","drawerPosition","drawerContentOptions","drawerType","swipeEdgeWidth","drawerHideStatusBarOnOpen","keyboardDismissMode","swipeMinDistance","overlayColor","drawerStatusBarAnimation","gestureHandlerProps","key","warnOnce","JSON","NavigationContent","useNavigationBuilder","initialRouteName","defaultStatus","openByDefault","backBehavior","children","screenListeners","screenOptions","navigation","createNavigatorFactory"],"mappings":"+jBAAA,OAAA,sBAAA,CAAA,YAAA,CAAA,oBAAA,KAAA,0BAAA,CAUA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,QAAA,KAAA,WAAA,CAOA,MAAA,CAAA,UAAA,2BAWA,QAAA,CAAA,eAAA,MAcU,IAde,CAAA,gBAcf,MAde,gBAcf,CAde,aAcf,MAde,aAcf,CAde,YAcf,MAde,YAcf,CAde,QAcf,MAde,QAcf,CAde,eAcf,MAde,eAcf,CAde,aAcf,MAde,aAcf,CAde,aAcf,MAde,aAcf,CAde,IAcf,MAde,IAcf,CAde,oBAcf,MAde,oBAcf,CADLA,IACK,0CACR,GAAIC,CAAAA,oBAA6C,CAAjD,EAAA,CAEA,GAAA,oBAAA,CAA0B,CACxBC,UAAAA,oBAAAA,CAAoC,CAClCC,cAAc,CAAEC,oBAAoB,CADF,cAAA,CAElCC,UAAU,CAAED,oBAAoB,CAFE,UAAA,CAGlCE,cAAc,CAAEF,oBAAoB,CAHF,SAAA,CAIlCG,yBAAyB,CAAEH,oBAAoB,CAJb,aAAA,CAKlCI,mBAAmB,CAAEJ,oBAAoB,CALP,mBAAA,CAMlCK,gBAAgB,CAAEL,oBAAoB,CANJ,gBAAA,CAOlCM,YAAY,CAAEN,oBAAoB,CAPA,YAAA,CAQlCO,wBAAwB,CAAEP,oBAAoB,CARZ,kBAAA,CASlCQ,mBAAmB,CAAER,oBAAoB,CAACQ,mBATR,CAApCV,EAaEA,MAAM,CAANA,IAAAA,CADF,oBACEA,EADF,OACEA,CACSW,SAAAA,GAAD,CAAS,CACjB,GAAIZ,oBAAoB,CAApBA,GAAoB,CAApBA,GAAJ,SAAA,CAA6C,CAE3C,MAAOA,CAAAA,oBAAoB,CAA3B,GAA2B,CAA3B,CACD,CANH,CACEC,EAQFY,QAAQ,CAAA,oBAAA,gMAEyLC,IAAI,CAAJA,SAAAA,CAAAA,oBAAAA,CAAAA,IAAAA,CAFjMD,CAEiMC,CAFzL,uFAARD,CAQD,CAED,GAAI,MAAA,CAAA,IAAA,GAAJ,SAAA,CAA+B,CAC7Bb,oBAAoB,CAApBA,IAAAA,CAAAA,IAAAA,CAEAa,QAAQ,CAARA,IAAQ,yKAARA,CAID,CAED,GAAI,MAAA,CAAA,aAAA,GAAJ,SAAA,CAAwC,CACtCA,QAAQ,CAARA,IAAQ,4MAARA,CAID,CAED,0BACEG,oBAAoB,CAAA,YAAA,CAMJ,CACdC,gBADc,CACdA,gBADc,CAEdC,aAAa,CACXA,aAAa,GAAbA,SAAAA,CAAAA,aAAAA,CAEIC,aAAa,CAAA,MAAA,CALL,QAAA,CAQdC,YARc,CAQdA,YARc,CASdC,QATc,CASdA,QATc,CAUdC,eAVc,CAUdA,eAVc,CAWdC,aAXc,CAWdA,aAXc,CAYdvB,oBAAAA,CAAAA,oBAZc,CANI,CADtB,CAAM,KAAN,uBAAM,KAAN,CAAM,WAAN,uBAAM,WAAN,CAAM,UAAN,uBAAM,UAAN,CAAwCe,iBAAxC,uBAAwCA,iBAAxC,CAsBA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,IAAA,CACE,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,KAAK,CAFP,KAAA,CAGE,WAAW,CAHb,WAAA,CAIE,UAAU,CAAES,UAJd,CAAA,CAAA,CADF,CADF,CAUD,CAED,cAAeC,CAAAA,sBAAsB,CAArC,eAAqC,CAArC","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  initialRouteName,\n  defaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  // @ts-expect-error: openByDefault is deprecated\n  openByDefault,\n  // @ts-expect-error: lazy is deprecated\n  lazy,\n  // @ts-expect-error: drawerContentOptions is deprecated\n  drawerContentOptions,\n  ...rest\n}: Props) {\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      initialRouteName,\n      defaultStatus:\n        defaultStatus !== undefined\n          ? defaultStatus\n          : openByDefault\n          ? 'open'\n          : 'closed',\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"]},"metadata":{},"sourceType":"module"}