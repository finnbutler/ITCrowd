{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.useResolvedFontFamily=useResolvedFontFamily;var _useTheme2=require(\"./useTheme\");function useResolvedFontFamily(props){var fontFamily=props.fontFamily,_props$fontStyle=props.fontStyle,fontStyle=_props$fontStyle===void 0?'normal':_props$fontStyle,_props$fontWeight=props.fontWeight,fontWeight=_props$fontWeight===void 0?400:_props$fontWeight;var newFontFamily=fontFamily;var newFontStyle=fontStyle;var newFontWeight=fontWeight;var _useTheme=(0,_useTheme2.useTheme)(),fontConfig=_useTheme.fontConfig,fontWeights=_useTheme.fontWeights,fonts=_useTheme.fonts;if(fontFamily&&fontFamily in fonts){var fontToken=fonts[fontFamily];if(fontConfig&&fontConfig[fontToken]){newFontWeight=undefined;newFontStyle=undefined;var fontWeightNumber=fontWeight in fontWeights?fontWeights[fontWeight]:fontWeight;var fontVariant=fontConfig[fontToken][fontWeightNumber];if(typeof fontVariant==='object'){if(fontVariant[fontStyle])newFontFamily=fontVariant[fontStyle];}else{newFontFamily=fontVariant;}}else{newFontFamily=fonts[fontFamily];}}return{fontFamily:newFontFamily,fontWeight:newFontWeight,fontStyle:newFontStyle};}","map":{"version":3,"sources":["useResolvedFontFamily.ts"],"names":["fontFamily","fontStyle","fontWeight","props","newFontFamily","newFontStyle","newFontWeight","fontConfig","fontWeights","fonts","fontToken","fontWeightNumber","fontVariant"],"mappings":"6GAAA,GAAA,CAAA,UAAA,CAAA,OAAA,cAAA,CAWO,QAAA,CAAA,qBAAA,CAAA,KAAA,CAIJ,CAAA,GACOA,CAAAA,UADP,CAC8DG,KAD9D,CAAA,UAAA,CAAA,gBAAA,CAC8DA,KAD9D,CAAA,SAAA,CACmBF,SADnB,CAAA,gBAAA,GAAA,IAAA,EAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,iBAAA,CAC8DE,KAD9D,CAAA,UAAA,CACyCD,UADzC,CAAA,iBAAA,GAAA,IAAA,EAAA,CAAA,GAAA,CAAA,iBAAA,CAED,GAAIE,CAAAA,aAAa,CAAjB,UAAA,CACA,GAAIC,CAAAA,YAAY,CAAhB,SAAA,CACA,GAAIC,CAAAA,aAAa,CAAjB,UAAA,CAJC,GAAA,CAAA,SAAA,CAM0C,CAAA,EAAA,UAAA,CAN1C,QAM0C,GAN1C,CAMOC,UANP,CAAA,SAAA,CAAA,UAAA,CAMmBC,WANnB,CAAA,SAAA,CAAA,WAAA,CAMgCC,KANhC,CAAA,SAAA,CAAA,KAAA,CAOD,GAAIT,UAAU,EAAIA,UAAU,GAA5B,CAAA,KAAA,CAAuC,CACrC,GAAMU,CAAAA,SAAS,CAAGD,KAAK,CAAvB,UAAuB,CAAvB,CAEA,GAAIF,UAAU,EAAIA,UAAU,CAA5B,SAA4B,CAA5B,CAAyC,CAKvCD,aAAa,CAAbA,SAAAA,CAEAD,YAAY,CAAZA,SAAAA,CAEA,GAAIM,CAAAA,gBAAgB,CAClBT,UAAU,GAAVA,CAAAA,WAAAA,CAA4BM,WAAW,CAAvCN,UAAuC,CAAvCA,CADF,UAAA,CAEA,GAAIU,CAAAA,WAAW,CAAGL,UAAU,CAAVA,SAAU,CAAVA,CAAlB,gBAAkBA,CAAlB,CAEA,GAAI,MAAA,CAAA,WAAA,GAAJ,QAAA,CAAqC,CACnC,GAAIK,WAAW,CAAf,SAAe,CAAf,CAA4BR,aAAa,CAAGQ,WAAW,CAA3BR,SAA2B,CAA3BA,CAD9B,CAAA,IAEO,CACLA,aAAa,CAAbA,WAAAA,CAEH,CAlBD,CAAA,IAkBO,CACLA,aAAa,CAAGK,KAAK,CAArBL,UAAqB,CAArBA,CAEH,CAED,OAAO,CACLJ,UAAU,CADL,aAAA,CAELE,UAAU,CAFL,aAAA,CAGLD,SAAS,CAHX,YAAO,CAAP,CAKD","sourcesContent":["import { useTheme } from './useTheme';\n\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nexport function useResolvedFontFamily(props: {\n  fontFamily?: string;\n  fontStyle?: string;\n  fontWeight?: string | number;\n}) {\n  const { fontFamily, fontStyle = 'normal', fontWeight = 400 } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n\n  const { fontConfig, fontWeights, fonts } = useTheme();\n  if (fontFamily && fontFamily in fonts) {\n    const fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined;\n      //@ts-ignore\n      newFontStyle = undefined;\n\n      let fontWeightNumber =\n        fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}