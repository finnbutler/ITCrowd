{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import InteractionManager from\"react-native-web/dist/exports/InteractionManager\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import Platform from\"react-native-web/dist/exports/Platform\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{PanGestureHandler,State as GestureState}from'react-native-gesture-handler';import Animated,{interpolate,runOnJS,useAnimatedGestureHandler,useAnimatedStyle,useDerivedValue,useSharedValue,withSpring}from'react-native-reanimated';import DrawerProgressContext from\"../../utils/DrawerProgressContext\";import Overlay from\"./Overlay\";var SWIPE_DISTANCE_MINIMUM=5;var DEFAULT_DRAWER_WIDTH='80%';var minmax=function minmax(value,start,end){'worklet';return Math.min(Math.max(value,start),end);};export default function Drawer(_ref){var dimensions=_ref.dimensions,drawerPosition=_ref.drawerPosition,drawerStyle=_ref.drawerStyle,drawerType=_ref.drawerType,gestureHandlerProps=_ref.gestureHandlerProps,hideStatusBarOnOpen=_ref.hideStatusBarOnOpen,keyboardDismissMode=_ref.keyboardDismissMode,onClose=_ref.onClose,onOpen=_ref.onOpen,open=_ref.open,overlayStyle=_ref.overlayStyle,renderDrawerContent=_ref.renderDrawerContent,renderSceneContent=_ref.renderSceneContent,statusBarAnimation=_ref.statusBarAnimation,swipeDistanceThreshold=_ref.swipeDistanceThreshold,swipeEdgeWidth=_ref.swipeEdgeWidth,swipeEnabled=_ref.swipeEnabled,swipeVelocityThreshold=_ref.swipeVelocityThreshold;var getDrawerWidth=function getDrawerWidth(){var _ref2=StyleSheet.flatten(drawerStyle)||{},_ref2$width=_ref2.width,width=_ref2$width===void 0?DEFAULT_DRAWER_WIDTH:_ref2$width;if(typeof width==='string'&&width.endsWith('%')){var percentage=Number(width.replace(/%$/,''));if(Number.isFinite(percentage)){return dimensions.width*(percentage/100);}}return typeof width==='number'?width:0;};var drawerWidth=getDrawerWidth();var isOpen=drawerType==='permanent'?true:open;var isRight=drawerPosition==='right';var getDrawerTranslationX=React.useCallback(function(open){'worklet';if(drawerPosition==='left'){return open?0:-drawerWidth;}return open?0:drawerWidth;},[drawerPosition,drawerWidth]);var hideStatusBar=React.useCallback(function(hide){if(hideStatusBarOnOpen){StatusBar.setHidden(hide,statusBarAnimation);}},[hideStatusBarOnOpen,statusBarAnimation]);React.useEffect(function(){hideStatusBar(isOpen);return function(){return hideStatusBar(false);};},[isOpen,hideStatusBarOnOpen,statusBarAnimation,hideStatusBar]);var interactionHandleRef=React.useRef(null);var startInteraction=function startInteraction(){interactionHandleRef.current=InteractionManager.createInteractionHandle();};var endInteraction=function endInteraction(){if(interactionHandleRef.current!=null){InteractionManager.clearInteractionHandle(interactionHandleRef.current);interactionHandleRef.current=null;}};var hideKeyboard=function hideKeyboard(){if(keyboardDismissMode==='on-drag'){Keyboard.dismiss();}};var onGestureStart=function onGestureStart(){startInteraction();hideKeyboard();hideStatusBar(true);};var onGestureEnd=function onGestureEnd(){endInteraction();};var hitSlop=isRight?{right:0,width:isOpen?undefined:swipeEdgeWidth}:{left:0,width:isOpen?undefined:swipeEdgeWidth};var touchStartX=useSharedValue(0);var touchX=useSharedValue(0);var translationX=useSharedValue(getDrawerTranslationX(open));var gestureState=useSharedValue(GestureState.UNDETERMINED);var toggleDrawer=React.useCallback(function(open,velocity){'worklet';var translateX=getDrawerTranslationX(open);touchStartX.value=0;touchX.value=0;translationX.value=withSpring(translateX,{velocity:velocity,stiffness:1000,damping:500,mass:3,overshootClamping:true,restDisplacementThreshold:0.01,restSpeedThreshold:0.01},function(){if(translationX.value===getDrawerTranslationX(true)){runOnJS(onOpen)();}else if(translationX.value===getDrawerTranslationX(false)){runOnJS(onClose)();}});},[getDrawerTranslationX,onClose,onOpen,touchStartX,touchX,translationX]);React.useEffect(function(){return toggleDrawer(open);},[open,toggleDrawer]);var onGestureEvent=useAnimatedGestureHandler({onStart:function onStart(event,ctx){ctx.startX=translationX.value;gestureState.value=event.state;touchStartX.value=event.x;runOnJS(onGestureStart)();},onActive:function onActive(event,ctx){touchX.value=event.x;translationX.value=ctx.startX+event.translationX;gestureState.value=event.state;},onEnd:function onEnd(event){gestureState.value=event.state;var nextOpen=Math.abs(event.translationX)>SWIPE_DISTANCE_MINIMUM&&Math.abs(event.translationX)>swipeVelocityThreshold||Math.abs(event.translationX)>swipeDistanceThreshold?drawerPosition==='left'?(event.velocityX===0?event.translationX:event.velocityX)>0:(event.velocityX===0?event.translationX:event.velocityX)<0:open;toggleDrawer(nextOpen,event.velocityX);runOnJS(onGestureEnd)();}});var translateX=useDerivedValue(function(){var touchDistance=drawerType==='front'&&gestureState.value===GestureState.ACTIVE?minmax(drawerPosition==='left'?touchStartX.value-drawerWidth:dimensions.width-drawerWidth-touchStartX.value,0,dimensions.width):0;var translateX=drawerPosition==='left'?minmax(translationX.value+touchDistance,-drawerWidth,0):minmax(translationX.value-touchDistance,0,drawerWidth);return translateX;});var drawerAnimatedStyle=useAnimatedStyle(function(){return{transform:[{translateX:drawerType==='permanent'||drawerType==='back'?0:translateX.value}]};});var contentAnimatedStyle=useAnimatedStyle(function(){return{transform:[{translateX:drawerType==='permanent'||drawerType==='front'?0:drawerPosition==='left'?drawerWidth+translateX.value:translateX.value-drawerWidth}]};});var progress=useDerivedValue(function(){return drawerType==='permanent'?1:interpolate(translateX.value,[getDrawerTranslationX(false),getDrawerTranslationX(true)],[0,1]);});return React.createElement(DrawerProgressContext.Provider,{value:progress},React.createElement(PanGestureHandler,_extends({activeOffsetX:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],failOffsetY:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],hitSlop:hitSlop,enabled:drawerType!=='permanent'&&swipeEnabled,onGestureEvent:onGestureEvent},gestureHandlerProps),React.createElement(Animated.View,{style:[styles.main,{flexDirection:drawerType==='permanent'&&!isRight?'row-reverse':'row'}]},React.createElement(Animated.View,{style:[styles.content,contentAnimatedStyle]},React.createElement(View,{accessibilityElementsHidden:isOpen&&drawerType!=='permanent',importantForAccessibility:isOpen&&drawerType!=='permanent'?'no-hide-descendants':'auto',style:styles.content},renderSceneContent()),drawerType!=='permanent'?React.createElement(Overlay,{progress:progress,onPress:function onPress(){return toggleDrawer(false);},style:overlayStyle}):null),React.createElement(Animated.View,{accessibilityViewIsModal:isOpen&&drawerType!=='permanent',removeClippedSubviews:Platform.OS!=='ios',style:[styles.container,{position:drawerType==='permanent'?'relative':'absolute',zIndex:drawerType==='back'?-1:0},drawerAnimatedStyle,drawerStyle]},renderDrawerContent()))));}var styles=StyleSheet.create({container:{top:0,bottom:0,maxWidth:'100%',width:DEFAULT_DRAWER_WIDTH},content:{flex:1},main:_objectSpread({flex:1},Platform.select({web:null,default:{overflow:'hidden'}}))});","map":{"version":3,"sources":["Drawer.tsx"],"names":["State","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","minmax","Math","swipeVelocityThreshold","getDrawerWidth","width","StyleSheet","percentage","Number","dimensions","drawerWidth","isOpen","drawerType","isRight","drawerPosition","getDrawerTranslationX","open","hideStatusBar","hide","StatusBar","React","interactionHandleRef","startInteraction","InteractionManager","endInteraction","hideKeyboard","keyboardDismissMode","Keyboard","onGestureStart","onGestureEnd","hitSlop","right","swipeEdgeWidth","left","touchStartX","useSharedValue","touchX","translationX","gestureState","GestureState","toggleDrawer","translateX","withSpring","velocity","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","runOnJS","onGestureEvent","useAnimatedGestureHandler","onStart","ctx","event","onActive","onEnd","nextOpen","useDerivedValue","touchDistance","drawerAnimatedStyle","useAnimatedStyle","transform","value","contentAnimatedStyle","progress","interpolate","styles","flexDirection","content","renderSceneContent","overlayStyle","Platform","position","zIndex","renderDrawerContent","container","top","bottom","maxWidth","flex","main","web","default","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  InteractionManager,\n  Keyboard,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  State as GestureState,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  interpolate,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport Overlay from './Overlay';\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst minmax = (value: number, start: number, end: number) => {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\n\nexport default function Drawer({\n  dimensions,\n  drawerPosition,\n  drawerStyle,\n  drawerType,\n  gestureHandlerProps,\n  hideStatusBarOnOpen,\n  keyboardDismissMode,\n  onClose,\n  onOpen,\n  open,\n  overlayStyle,\n  renderDrawerContent,\n  renderSceneContent,\n  statusBarAnimation,\n  swipeDistanceThreshold,\n  swipeEdgeWidth,\n  swipeEnabled,\n  swipeVelocityThreshold,\n}: DrawerProps) {\n  const getDrawerWidth = (): number => {\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  const drawerWidth = getDrawerWidth();\n\n  const isOpen = drawerType === 'permanent' ? true : open;\n  const isRight = drawerPosition === 'right';\n\n  const getDrawerTranslationX = React.useCallback(\n    (open: boolean) => {\n      'worklet';\n\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n\n      return open ? 0 : drawerWidth;\n    },\n    [drawerPosition, drawerWidth]\n  );\n\n  const hideStatusBar = React.useCallback(\n    (hide: boolean) => {\n      if (hideStatusBarOnOpen) {\n        StatusBar.setHidden(hide, statusBarAnimation);\n      }\n    },\n    [hideStatusBarOnOpen, statusBarAnimation]\n  );\n\n  React.useEffect(() => {\n    hideStatusBar(isOpen);\n\n    return () => hideStatusBar(false);\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n\n  const interactionHandleRef = React.useRef<number | null>(null);\n\n  const startInteraction = () => {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  const endInteraction = () => {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  const hideKeyboard = () => {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  const onGestureStart = () => {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  const onGestureEnd = () => {\n    endInteraction();\n  };\n\n  // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n  // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n  const hitSlop = isRight\n    ? // Extend hitSlop to the side of the screen when drawer is closed\n      // This lets the user drag the drawer from the side of the screen\n      { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n    : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n  const touchStartX = useSharedValue(0);\n  const touchX = useSharedValue(0);\n  const translationX = useSharedValue(getDrawerTranslationX(open));\n  const gestureState = useSharedValue<GestureState>(GestureState.UNDETERMINED);\n\n  const toggleDrawer = React.useCallback(\n    (open: boolean, velocity?: number) => {\n      'worklet';\n\n      const translateX = getDrawerTranslationX(open);\n\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = withSpring(\n        translateX,\n        {\n          velocity,\n          stiffness: 1000,\n          damping: 500,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n        },\n        () => {\n          if (translationX.value === getDrawerTranslationX(true)) {\n            runOnJS(onOpen)();\n          } else if (translationX.value === getDrawerTranslationX(false)) {\n            runOnJS(onClose)();\n          }\n        }\n      );\n    },\n    [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]\n  );\n\n  React.useEffect(() => toggleDrawer(open), [open, toggleDrawer]);\n\n  const onGestureEvent = useAnimatedGestureHandler<\n    PanGestureHandlerGestureEvent,\n    { startX: number }\n  >({\n    onStart: (event, ctx) => {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n\n      runOnJS(onGestureStart)();\n    },\n    onActive: (event, ctx) => {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: (event) => {\n      gestureState.value = event.state;\n\n      const nextOpen =\n        (Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM &&\n          Math.abs(event.translationX) > swipeVelocityThreshold) ||\n        Math.abs(event.translationX) > swipeDistanceThreshold\n          ? drawerPosition === 'left'\n            ? // If swiped to right, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) > 0\n            : // If swiped to left, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) < 0\n          : open;\n\n      toggleDrawer(nextOpen, event.velocityX);\n      runOnJS(onGestureEnd)();\n    },\n  });\n\n  const translateX = useDerivedValue(() => {\n    // Comment stolen from react-native-gesture-handler/DrawerLayout\n    //\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the translationX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    const touchDistance =\n      drawerType === 'front' && gestureState.value === GestureState.ACTIVE\n        ? minmax(\n            drawerPosition === 'left'\n              ? touchStartX.value - drawerWidth\n              : dimensions.width - drawerWidth - touchStartX.value,\n            0,\n            dimensions.width\n          )\n        : 0;\n\n    const translateX =\n      drawerPosition === 'left'\n        ? minmax(translationX.value + touchDistance, -drawerWidth, 0)\n        : minmax(translationX.value - touchDistance, 0, drawerWidth);\n\n    return translateX;\n  });\n\n  const drawerAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX:\n            drawerType === 'permanent' || drawerType === 'back'\n              ? 0\n              : translateX.value,\n        },\n      ],\n    };\n  });\n\n  const contentAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX:\n            drawerType === 'permanent' || drawerType === 'front'\n              ? 0\n              : drawerPosition === 'left'\n              ? drawerWidth + translateX.value\n              : translateX.value - drawerWidth,\n        },\n      ],\n    };\n  });\n\n  const progress = useDerivedValue(() => {\n    return drawerType === 'permanent'\n      ? 1\n      : interpolate(\n          translateX.value,\n          [getDrawerTranslationX(false), getDrawerTranslationX(true)],\n          [0, 1]\n        );\n  });\n\n  return (\n    <DrawerProgressContext.Provider value={progress}>\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && swipeEnabled}\n        onGestureEvent={onGestureEvent}\n        {...gestureHandlerProps}\n      >\n        {/* Immediate child of gesture handler needs to be an Animated.View */}\n        <Animated.View\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View style={[styles.content, contentAnimatedStyle]}>\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent()}\n            </View>\n            {drawerType !== 'permanent' ? (\n              <Overlay\n                progress={progress}\n                onPress={() => toggleDrawer(false)}\n                style={overlayStyle}\n              />\n            ) : null}\n          </Animated.View>\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            style={[\n              styles.container,\n              {\n                position: drawerType === 'permanent' ? 'relative' : 'absolute',\n                zIndex: drawerType === 'back' ? -1 : 0,\n              },\n              drawerAnimatedStyle,\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent()}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    </DrawerProgressContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}