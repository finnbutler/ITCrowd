{"ast":null,"code":"import{getItemCount}from\"@react-stately/collections\";import{useSelectableList,useSelectableItem}from\"@react-aria/selection\";import{useLabel}from\"@react-aria/label\";import{useFocusWithin,isFocusVisible,useHover,usePress}from\"@react-aria/interactions\";import{filterDOMProps,mergeProps,useId,isMac,isWebKit,useSlotId}from\"@react-aria/utils\";import _babelRuntimeHelpersEsmExtends from\"@babel/runtime/helpers/esm/extends\";export var listData=new WeakMap();function $d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey(key){if(typeof key==='string'){return key.replace(/\\s*/g,'');}return''+key;}export function getItemId(state,itemKey){var data=listData.get(state);if(!data){throw new Error('Unknown list');}return data.id+\"-option-\"+$d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey(itemKey);}export function useListBox(props,state,ref){var domProps=filterDOMProps(props,{labelable:true});var _useSelectableList=useSelectableList(_babelRuntimeHelpersEsmExtends({},props,{ref:ref,selectionManager:state.selectionManager,collection:state.collection,disabledKeys:state.disabledKeys})),listProps=_useSelectableList.listProps;var _useFocusWithin=useFocusWithin({onFocusWithin:props.onFocus,onBlurWithin:props.onBlur,onFocusWithinChange:props.onFocusChange}),focusWithinProps=_useFocusWithin.focusWithinProps;var id=useId(props.id);listData.set(state,{id:id,shouldUseVirtualFocus:props.shouldUseVirtualFocus,shouldSelectOnPressUp:props.shouldSelectOnPressUp,shouldFocusOnHover:props.shouldFocusOnHover,isVirtualized:props.isVirtualized});var _useLabel=useLabel(_babelRuntimeHelpersEsmExtends({},props,{id:id,labelElementType:'span'})),labelProps=_useLabel.labelProps,fieldProps=_useLabel.fieldProps;return{labelProps:labelProps,listBoxProps:mergeProps(domProps,focusWithinProps,state.selectionManager.selectionMode==='multiple'?{'aria-multiselectable':'true'}:{},_babelRuntimeHelpersEsmExtends({role:'listbox'},mergeProps(fieldProps,listProps)))};}export function useOption(props,state,ref){var _props$isDisabled,_props$isSelected,_props$shouldSelectOn,_props$shouldFocusOnH,_props$shouldUseVirtu,_props$isVirtualized;var key=props.key;var data=listData.get(state);var isDisabled=(_props$isDisabled=props.isDisabled)!=null?_props$isDisabled:state.disabledKeys.has(key);var isSelected=(_props$isSelected=props.isSelected)!=null?_props$isSelected:state.selectionManager.isSelected(key);var isFocused=state.selectionManager.focusedKey===key;var shouldSelectOnPressUp=(_props$shouldSelectOn=props.shouldSelectOnPressUp)!=null?_props$shouldSelectOn:data.shouldSelectOnPressUp;var shouldFocusOnHover=(_props$shouldFocusOnH=props.shouldFocusOnHover)!=null?_props$shouldFocusOnH:data.shouldFocusOnHover;var shouldUseVirtualFocus=(_props$shouldUseVirtu=props.shouldUseVirtualFocus)!=null?_props$shouldUseVirtu:data.shouldUseVirtualFocus;var isVirtualized=(_props$isVirtualized=props.isVirtualized)!=null?_props$isVirtualized:data.isVirtualized;var labelId=useSlotId();var descriptionId=useSlotId();var optionProps={role:'option','aria-disabled':isDisabled,'aria-selected':state.selectionManager.selectionMode!=='none'?isSelected:undefined};if(!(isMac()&&isWebKit())){optionProps['aria-label']=props['aria-label'];optionProps['aria-labelledby']=labelId;optionProps['aria-describedby']=descriptionId;}if(isVirtualized){optionProps['aria-posinset']=state.collection.getItem(key).index+1;optionProps['aria-setsize']=getItemCount(state.collection);}var _useSelectableItem=useSelectableItem({selectionManager:state.selectionManager,key:key,ref:ref,shouldSelectOnPressUp:shouldSelectOnPressUp,isVirtualized:isVirtualized,shouldUseVirtualFocus:shouldUseVirtualFocus}),itemProps=_useSelectableItem.itemProps;var _usePress=usePress(_babelRuntimeHelpersEsmExtends({},itemProps,{isDisabled:isDisabled,preventFocusOnPress:shouldUseVirtualFocus})),pressProps=_usePress.pressProps,isPressed=_usePress.isPressed;var _useHover=useHover({isDisabled:isDisabled||!shouldFocusOnHover,onHoverStart:function onHoverStart(){if(!isFocusVisible()){state.selectionManager.setFocused(true);state.selectionManager.setFocusedKey(key);}}}),hoverProps=_useHover.hoverProps;return{optionProps:_babelRuntimeHelpersEsmExtends({},optionProps,mergeProps(pressProps,hoverProps),{id:getItemId(state,key)}),labelProps:{id:labelId},descriptionProps:{id:descriptionId},isFocused:isFocused,isSelected:isSelected,isDisabled:isDisabled,isPressed:isPressed};}export function useListBoxSection(props){var heading=props.heading,ariaLabel=props['aria-label'];var headingId=useId();return{itemProps:{role:'presentation'},headingProps:heading?{id:headingId,'aria-hidden':true}:{},groupProps:{role:'group','aria-label':ariaLabel,'aria-labelledby':heading?headingId:undefined}};}","map":{"version":3,"sources":["packages/@react-aria/listbox/src/utils.ts","packages/@react-aria/listbox/src/useListBox.ts","packages/@react-aria/listbox/src/useOption.ts","packages/@react-aria/listbox/src/useListBoxSection.ts"],"names":["listData","key","data","normalizeKey","domProps","filterDOMProps","labelable","listProps","useSelectableList","ref","selectionManager","state","collection","disabledKeys","focusWithinProps","useFocusWithin","onFocusWithin","props","onBlurWithin","onFocusWithinChange","onFocusChange","id","useId","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","fieldProps","useLabel","labelElementType","labelProps","listBoxProps","mergeProps","role","isDisabled","isSelected","isFocused","labelId","useSlotId","descriptionId","optionProps","undefined","isMac","isWebKit","getItemCount","itemProps","useSelectableItem","isPressed","usePress","preventFocusOnPress","hoverProps","useHover","onHoverStart","isFocusVisible","descriptionProps","ariaLabel","headingId","headingProps","heading","groupProps"],"mappings":"uaAuBO,IAAMA,CAAAA,QAAQ,CAAG,GAAjB,CAAA,OAAiB,EAAjB,CAEP,QAAA,CAAA,kDAAA,CAAA,GAAA,CAAwC,CACtC,GAAI,MAAA,CAAA,GAAA,GAAJ,QAAA,CAA6B,CAC3B,MAAOC,CAAAA,GAAG,CAAHA,OAAAA,CAAAA,MAAAA,CAAP,EAAOA,CAAP,CACD,CAED,MAAO,GAAP,GAAA,CACD,C,MAEM,SAAA,CAAA,SAAA,CAAA,KAAA,CAAA,OAAA,CAAiE,CACtE,GAAIC,CAAAA,IAAI,CAAGF,QAAQ,CAARA,GAAAA,CAAX,KAAWA,CAAX,CAEA,GAAI,CAAJ,IAAA,CAAW,CACT,KAAM,IAAA,CAAA,KAAA,CAAN,cAAM,CAAN,CACD,CAED,MAAUE,CAAAA,IAAI,CAAd,EAAUA,CAAV,UAAUA,CAAkBC,kDAAY,CAAxC,OAAwC,CAAxC,CACD,C,MCsBM,SAAA,CAAA,UAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAoH,CACzH,GAAIC,CAAAA,QAAQ,CAAGC,cAAc,CAAA,KAAA,CAAQ,CAACC,SAAS,CAAE,IAAZ,CAAR,CAA7B,CACA,uBAAkBE,iBAAiB,CAAA,8BAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAEjCC,GAFiC,CAEjCA,GAFiC,CAGjCC,gBAAgB,CAAEC,KAAK,CAHU,gBAAA,CAIjCC,UAAU,CAAED,KAAK,CAJgB,UAAA,CAKjCE,YAAY,CAAEF,KAAK,CAACE,YALa,CAAA,CAAA,CAAnC,CAAKN,SAAL,oBAAKA,SAAL,CAQA,oBAAyBQ,cAAc,CAAC,CACtCC,aAAa,CAAEC,KAAK,CADkB,OAAA,CAEtCC,YAAY,CAAED,KAAK,CAFmB,MAAA,CAGtCE,mBAAmB,CAAEF,KAAK,CAACG,aAHW,CAAD,CAAvC,CAAKN,gBAAL,iBAAKA,gBAAL,CAOA,GAAIO,CAAAA,EAAE,CAAGC,KAAK,CAACL,KAAK,CAApB,EAAc,CAAd,CACA,QAAA,CAAA,GAAA,CAAA,KAAA,CAAoB,CAClBI,EADkB,CAClBA,EADkB,CAElBE,qBAAqB,CAAEN,KAAK,CAFV,qBAAA,CAGlBO,qBAAqB,CAAEP,KAAK,CAHV,qBAAA,CAIlBQ,kBAAkB,CAAER,KAAK,CAJP,kBAAA,CAKlBS,aAAa,CAAET,KAAK,CAACS,aALH,CAApB,EAQA,cAA+BE,QAAQ,CAAA,8BAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAErCP,EAFqC,CAErCA,EAFqC,CAKrCQ,gBAAgB,CAAE,MALmB,CAAA,CAAA,CAAvC,CAAI,UAAJ,WAAI,UAAJ,CAAiBF,UAAjB,WAAiBA,UAAjB,CAQA,MAAO,CACLG,UADK,CACLA,UADK,CAELC,YAAY,CAAEC,UAAU,CAAA,QAAA,CAAA,gBAAA,CAA6B,KAAK,CAAL,gBAAA,CAAA,aAAA,GAAA,UAAA,CAAsD,CACzG,uBAAwB,MADiF,CAAtD,CAA7B,EAAA,CAAA,8BAAA,CAAA,CAGtBC,IAAI,CAAE,SAHgB,CAAA,CAInBD,UAAU,CAAA,UAAA,CAJS,SAIT,CAJS,CAAA,CAFnB,CAAP,CASD,C,MChBM,SAAA,CAAA,SAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAA4G,CAAA,GAAA,CAAA,iBAAA,CAAA,iBAAA,CAAA,qBAAA,CAAA,qBAAA,CAAA,qBAAA,CAAA,oBAAA,CACjH,GACE/B,CAAAA,GADF,CAAA,KAAA,CACEA,GADF,CAIA,GAAIC,CAAAA,IAAI,CAAG,QAAA,CAAA,GAAA,CAAX,KAAW,CAAX,CAEA,GAAIgC,CAAAA,UAAU,CAAA,CAAA,iBAAA,CAAGjB,KAAK,CAAR,UAAA,GAAA,IAAA,CAAA,iBAAA,CAAuBN,KAAK,CAALA,YAAAA,CAAAA,GAAAA,CAArC,GAAqCA,CAArC,CACA,GAAIwB,CAAAA,UAAU,CAAA,CAAA,iBAAA,CAAGlB,KAAK,CAAR,UAAA,GAAA,IAAA,CAAA,iBAAA,CAAuBN,KAAK,CAALA,gBAAAA,CAAAA,UAAAA,CAArC,GAAqCA,CAArC,CACA,GAAIyB,CAAAA,SAAS,CAAGzB,KAAK,CAALA,gBAAAA,CAAAA,UAAAA,GAAhB,GAAA,CACA,GAAIa,CAAAA,qBAAqB,CAAA,CAAA,qBAAA,CAAGP,KAAK,CAAR,qBAAA,GAAA,IAAA,CAAA,qBAAA,CAAkCf,IAAI,CAA/D,qBAAA,CACA,GAAIuB,CAAAA,kBAAkB,CAAA,CAAA,qBAAA,CAAGR,KAAK,CAAR,kBAAA,GAAA,IAAA,CAAA,qBAAA,CAA+Bf,IAAI,CAAzD,kBAAA,CACA,GAAIqB,CAAAA,qBAAqB,CAAA,CAAA,qBAAA,CAAGN,KAAK,CAAR,qBAAA,GAAA,IAAA,CAAA,qBAAA,CAAkCf,IAAI,CAA/D,qBAAA,CACA,GAAIwB,CAAAA,aAAa,CAAA,CAAA,oBAAA,CAAGT,KAAK,CAAR,aAAA,GAAA,IAAA,CAAA,oBAAA,CAA0Bf,IAAI,CAA/C,aAAA,CAEA,GAAImC,CAAAA,OAAO,CAAGC,SAAd,EAAA,CACA,GAAIC,CAAAA,aAAa,CAAGD,SAApB,EAAA,CAEA,GAAIE,CAAAA,WAAW,CAAG,CAChBP,IAAI,CADY,QAAA,CAEhB,gBAFgB,UAAA,CAGhB,gBAAiBtB,KAAK,CAALA,gBAAAA,CAAAA,aAAAA,GAAAA,MAAAA,CAAAA,UAAAA,CAA+D8B,SAHhE,CAAlB,CASA,GAAI,EAAEC,KAAK,IAAMC,QAAjB,EAAI,CAAJ,CAA8B,CAC5BH,WAAW,CAAXA,YAAW,CAAXA,CAA4BvB,KAAK,CAAjCuB,YAAiC,CAAjCA,CACAA,WAAW,CAAXA,iBAAW,CAAXA,CAAAA,OAAAA,CACAA,WAAW,CAAXA,kBAAW,CAAXA,CAAAA,aAAAA,CACD,CAED,GAAA,aAAA,CAAmB,CACjBA,WAAW,CAAXA,eAAW,CAAXA,CAA+B7B,KAAK,CAALA,UAAAA,CAAAA,OAAAA,CAAAA,GAAAA,EAAAA,KAAAA,CAA/B6B,CAAAA,CACAA,WAAW,CAAXA,cAAW,CAAXA,CAA8BI,YAAY,CAACjC,KAAK,CAAhD6B,UAA0C,CAA1CA,CACD,CAED,uBAAkBM,iBAAiB,CAAC,CAClCpC,gBAAgB,CAAEC,KAAK,CADW,gBAAA,CAElCV,GAFkC,CAElCA,GAFkC,CAGlCQ,GAHkC,CAGlCA,GAHkC,CAIlCe,qBAJkC,CAIlCA,qBAJkC,CAKlCE,aALkC,CAKlCA,aALkC,CAMlCH,qBAAAA,CAAAA,qBANkC,CAAD,CAAnC,CAAKsB,SAAL,oBAAKA,SAAL,CASA,cAA8BG,QAAQ,CAAA,8BAAA,CAAA,EAAA,CAAA,SAAA,CAAA,CAAgBd,UAAhB,CAAgBA,UAAhB,CAA4Be,mBAAmB,CAAE1B,qBAAjD,CAAA,CAAA,CAAtC,CAAI,UAAJ,WAAI,UAAJ,CAAiBwB,SAAjB,WAAiBA,SAAjB,CAEA,cAAmBI,QAAQ,CAAC,CAC1BjB,UAAU,CAAEA,UAAU,EAAI,CADA,kBAAA,CAE1BkB,YAF0B,wBAEX,CACb,GAAI,CAACC,cAAL,EAAA,CAAuB,CACrB1C,KAAK,CAALA,gBAAAA,CAAAA,UAAAA,CAAAA,IAAAA,EACAA,KAAK,CAALA,gBAAAA,CAAAA,aAAAA,CAAAA,GAAAA,EACD,CACF,CAPyB,CAAD,CAA3B,CAAKuC,UAAL,WAAKA,UAAL,CAUA,MAAO,CACLV,WAAW,CAAA,8BAAA,CAAA,EAAA,CAAA,WAAA,CAENR,UAAU,CAAA,UAAA,CAFJ,UAEI,CAFJ,CAAA,CAGTX,EAAE,CAAE,SAAA,CAAA,KAAA,CAAA,GAAA,CAHK,CAAA,CADN,CAMLS,UAAU,CAAE,CACVT,EAAE,CAAEgB,OADM,CANP,CASLiB,gBAAgB,CAAE,CAChBjC,EAAE,CAAEkB,aADY,CATb,CAYLH,SAZK,CAYLA,SAZK,CAaLD,UAbK,CAaLA,UAbK,CAcLD,UAdK,CAcLA,UAdK,CAeLa,SAAAA,CAAAA,SAfK,CAAP,CAiBD,C,MChIM,SAAA,CAAA,iBAAA,CAAA,KAAA,CAA+E,CACpF,GAAI,CAAA,OAAJ,CAAA,KAAA,CAAI,OAAJ,CAA4BQ,SAA5B,CAAA,KAAA,CAAc,YAAd,EACA,GAAIC,CAAAA,SAAS,CAAGlC,KAAhB,EAAA,CAEA,MAAO,CACLuB,SAAS,CAAE,CACTZ,IAAI,CAAE,cADG,CADN,CAILwB,YAAY,CAAEC,OAAO,CAAG,CAItBrC,EAAE,CAJoB,SAAA,CAKtB,cAAe,IALO,CAAH,CAJhB,EAAA,CAWLsC,UAAU,CAAE,CACV1B,IAAI,CADM,OAAA,CAEV,aAFU,SAAA,CAGV,kBAAmByB,OAAO,CAAA,SAAA,CAAejB,SAH/B,CAXP,CAAP,CAiBD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, ReactNode, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {ListState} from '@react-stately/list';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the option. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n  /** Whether the option is currently selected. */\n  isSelected: boolean,\n  /** Whether the option is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the option is disabled. */\n  isDisabled: boolean\n}\n\ninterface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<HTMLElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus\n  });\n\n  let {pressProps, isPressed} = usePress({...itemProps, isDisabled, preventFocusOnPress: shouldUseVirtualFocus});\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(pressProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}