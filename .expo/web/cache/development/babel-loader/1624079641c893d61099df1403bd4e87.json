{"ast":null,"code":"'use strict';\n\nexport function distance(touchTrackA, touchTrackB, ofCurrent) {\n  var xa, ya, xb, yb;\n\n  if (ofCurrent) {\n    xa = touchTrackA.currentPageX;\n    ya = touchTrackA.currentPageY;\n    xb = touchTrackB.currentPageX;\n    yb = touchTrackB.currentPageY;\n  } else {\n    xa = touchTrackA.previousPageX;\n    ya = touchTrackA.previousPageY;\n    xb = touchTrackB.previousPageX;\n    yb = touchTrackB.previousPageY;\n  }\n\n  return Math.sqrt(Math.pow(xa - xb, 2) + Math.pow(ya - yb, 2));\n}\nexport function maxDistance(touchBank, ofCurrent) {\n  var max = 0;\n\n  for (var i = 0; i < touchBank.length - 1; i++) {\n    for (var j = i + 1; j < touchBank.length; j++) {\n      var d = distance(touchBank[i], touchBank[j], ofCurrent);\n\n      if (d > max) {\n        max = d;\n      }\n    }\n  }\n\n  return max;\n}\nexport function pinchDistance(touchHistory, touchesChangedAfter, ofCurrent) {\n  var touchBank = touchHistory.touchBank;\n\n  if (touchHistory.numberActiveTouches > 1) {\n    var filteredTouchBank = touchBank.filter(function (touchTrack) {\n      return touchTrack && touchTrack.currentTimeStamp >= touchesChangedAfter;\n    });\n    return maxDistance(filteredTouchBank, ofCurrent);\n  }\n}","map":{"version":3,"sources":["/Users/finnbeardmore/Documents/GitHub/ITCrowd/node_modules/react-native-gesture-responder/library/TouchDistanceMath.js"],"names":["distance","touchTrackA","touchTrackB","ofCurrent","xa","ya","xb","yb","currentPageX","currentPageY","previousPageX","previousPageY","Math","sqrt","pow","maxDistance","touchBank","max","i","length","j","d","pinchDistance","touchHistory","touchesChangedAfter","numberActiveTouches","filteredTouchBank","filter","touchTrack","currentTimeStamp"],"mappings":"AAAA;;AAEA,OAAO,SAASA,QAAT,CAAkBC,WAAlB,EAA+BC,WAA/B,EAA4CC,SAA5C,EAAuD;AAC5D,MAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB;;AACA,MAAGJ,SAAH,EAAc;AACZC,IAAAA,EAAE,GAAGH,WAAW,CAACO,YAAjB;AACAH,IAAAA,EAAE,GAAGJ,WAAW,CAACQ,YAAjB;AACAH,IAAAA,EAAE,GAAGJ,WAAW,CAACM,YAAjB;AACAD,IAAAA,EAAE,GAAGL,WAAW,CAACO,YAAjB;AACD,GALD,MAKO;AACLL,IAAAA,EAAE,GAAGH,WAAW,CAACS,aAAjB;AACAL,IAAAA,EAAE,GAAGJ,WAAW,CAACU,aAAjB;AACAL,IAAAA,EAAE,GAAGJ,WAAW,CAACQ,aAAjB;AACAH,IAAAA,EAAE,GAAGL,WAAW,CAACS,aAAjB;AACD;;AACD,SAAOC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASV,EAAE,GAAGE,EAAd,EAAkB,CAAlB,IAAuBM,IAAI,CAACE,GAAL,CAAST,EAAE,GAAGE,EAAd,EAAkB,CAAlB,CAAjC,CAAP;AACD;AAED,OAAO,SAASQ,WAAT,CAAqBC,SAArB,EAAgCb,SAAhC,EAA2C;AAChD,MAAIc,GAAG,GAAG,CAAV;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,SAAS,CAACG,MAAV,GAAmB,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,SAAI,IAAIE,CAAC,GAAGF,CAAC,GAAC,CAAd,EAAiBE,CAAC,GAAGJ,SAAS,CAACG,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AAC1C,UAAIC,CAAC,GAAGrB,QAAQ,CAACgB,SAAS,CAACE,CAAD,CAAV,EAAeF,SAAS,CAACI,CAAD,CAAxB,EAA6BjB,SAA7B,CAAhB;;AACA,UAAGkB,CAAC,GAAGJ,GAAP,EAAY;AACVA,QAAAA,GAAG,GAAGI,CAAN;AACD;AACF;AACF;;AACD,SAAOJ,GAAP;AACD;AAED,OAAO,SAASK,aAAT,CAAuBC,YAAvB,EAAqCC,mBAArC,EAA0DrB,SAA1D,EAAqE;AAC1E,MAAIa,SAAS,GAAGO,YAAY,CAACP,SAA7B;;AACA,MAAGO,YAAY,CAACE,mBAAb,GAAmC,CAAtC,EAAyC;AACvC,QAAIC,iBAAiB,GAAGV,SAAS,CAACW,MAAV,CAAiB,UAACC,UAAD,EAAgB;AACvD,aAAOA,UAAU,IAAIA,UAAU,CAACC,gBAAX,IAA+BL,mBAApD;AACD,KAFuB,CAAxB;AAGA,WAAOT,WAAW,CAACW,iBAAD,EAAoBvB,SAApB,CAAlB;AACD;AACF","sourcesContent":["'use strict';\n\nexport function distance(touchTrackA, touchTrackB, ofCurrent) {\n  let xa, ya, xb, yb;\n  if(ofCurrent) {\n    xa = touchTrackA.currentPageX;\n    ya = touchTrackA.currentPageY;\n    xb = touchTrackB.currentPageX;\n    yb = touchTrackB.currentPageY;\n  } else {\n    xa = touchTrackA.previousPageX;\n    ya = touchTrackA.previousPageY;\n    xb = touchTrackB.previousPageX;\n    yb = touchTrackB.previousPageY;\n  }\n  return Math.sqrt(Math.pow(xa - xb, 2) + Math.pow(ya - yb, 2));\n}\n\nexport function maxDistance(touchBank, ofCurrent) {\n  let max = 0;\n  for(let i = 0; i < touchBank.length - 1; i++) {\n    for(let j = i+1; j < touchBank.length; j++) {\n      let d = distance(touchBank[i], touchBank[j], ofCurrent);\n      if(d > max) {\n        max = d;\n      }\n    }\n  }\n  return max;\n}\n\nexport function pinchDistance(touchHistory, touchesChangedAfter, ofCurrent) {\n  let touchBank = touchHistory.touchBank;\n  if(touchHistory.numberActiveTouches > 1) {\n    let filteredTouchBank = touchBank.filter((touchTrack) => {\n      return touchTrack && touchTrack.currentTimeStamp >= touchesChangedAfter;\n    });\n    return maxDistance(filteredTouchBank, ofCurrent);\n  }\n}"]},"metadata":{},"sourceType":"module"}