{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\haram\\\\OneDrive\\\\Desktop\\\\Itcrowd\\\\ITCrowd.github.io\\\\js\\\\signupForm.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text, Button, NativeBaseProvider, extendTheme, Input } from \"native-base\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { useState } from \"react\";\nimport Firebase from \"../config/firebase\";\nvar auth = Firebase.auth();\n\nfunction HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      passwordVisibility = _useState6[0],\n      setPasswordVisibility = _useState6[1];\n\n  var _useState7 = useState(\"eye\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      rightIcon = _useState8[0],\n      setRightIcon = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loginError = _useState10[0],\n      setLoginError = _useState10[1];\n\n  var handlePasswordVisibility = function handlePasswordVisibility() {\n    if (rightIcon === \"eye\") {\n      setRightIcon(\"eye-off\");\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === \"eye-off\") {\n      setRightIcon(\"eye\");\n      setPasswordVisibility(!passwordVisibility);\n    }\n  };\n\n  var onLogin = function onLogin() {\n    var currentUser, db;\n    return _regeneratorRuntime.async(function onLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(email !== \"\" && password !== \"\")) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(auth.createUserWithEmailAndPassword(email, password));\n\n          case 4:\n            currentUser = auth.currentUser;\n            db = Firebase.firestore();\n            db.collection(\"users\").doc(currentUser.uid).set({\n              email: currentUser.email\n            });\n\n          case 7:\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            alert(_context.t0.message);\n            setLoginError();\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  return React.createElement(NativeBaseProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, React.createElement(StatusBar, {\n    style: \"dark-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, \"Login\"), React.createElement(Input, {\n    inputStyle: {\n      fontSize: 14\n    },\n    containerStyle: {\n      backgroundColor: \"#fff\",\n      marginBottom: 20\n    },\n    leftIcon: \"email\",\n    placeholder: \"Enter email\",\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    textContentType: \"emailAddress\",\n    autoFocus: true,\n    value: email,\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), React.createElement(Input, {\n    inputStyle: {\n      fontSize: 14\n    },\n    containerStyle: {\n      backgroundColor: \"#fff\",\n      marginBottom: 20\n    },\n    leftIcon: \"lock\",\n    placeholder: \"Enter password\",\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    secureTextEntry: passwordVisibility,\n    textContentType: \"password\",\n    rightIcon: rightIcon,\n    value: password,\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    handlePasswordVisibility: handlePasswordVisibility,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    onPress: onLogin,\n    backgroundColor: \"#f57c00\",\n    title: \"Login\",\n    tileColor: \"#fff\",\n    titleSize: 20,\n    containerStyle: {\n      marginBottom: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, \" \", React.createElement(Text, {\n    color: \"#545871\",\n    fontFamily: \"Roboto_400Regular\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, \"Login In\")), React.createElement(Button, {\n    onPress: function onPress() {\n      return navigation.navigate(\"Signup\");\n    },\n    text: \"Go to Signup\",\n    color: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, \" \", React.createElement(Text, {\n    color: \"#545871\",\n    fontFamily: \"Roboto_400Regular\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, \"Sign Up\"))));\n}\n\nexport default HomeScreen;","map":{"version":3,"sources":["C:/Users/haram/OneDrive/Desktop/Itcrowd/ITCrowd.github.io/js/signupForm.js"],"names":["React","Text","Button","NativeBaseProvider","extendTheme","Input","StatusBar","useState","Firebase","auth","HomeScreen","navigation","email","setEmail","password","setPassword","passwordVisibility","setPasswordVisibility","rightIcon","setRightIcon","loginError","setLoginError","handlePasswordVisibility","onLogin","createUserWithEmailAndPassword","currentUser","db","firestore","collection","doc","uid","set","alert","message","fontSize","backgroundColor","marginBottom","text","navigate"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { ImageBackground, View } from \"react-native\";\r\nimport {\r\n  Text,\r\n  Button,\r\n  NativeBaseProvider,\r\n  extendTheme,\r\n  Input,\r\n} from \"native-base\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { useState } from \"react\";\r\n\r\nimport Firebase from \"../config/firebase\";\r\n\r\n// TODO: Replace the following with your app's Firebase project configuration\r\nconst auth = Firebase.auth();\r\nfunction HomeScreen({ navigation }) {\r\n  // const response = await fetch('/api/names');\r\n  // const names = await response.json();\r\n\r\n  // console.log(names);\r\n  // https://itcrowdproject.uqcloud.net/?PET_PHOTO\r\n  /* let [fontsLoaded, error] = useFonts({\r\n    Roboto_400Regular,\r\n    PaytoneOne_400Regular,\r\n  });\r\n  if (!fontsLoaded) {\r\n    return <AppLoading />;\r\n  }\r\n  return (\r\n    <ImageBackground\r\n      source={background}\r\n      resizeMode=\"cover\"\r\n      style={{\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <NativeBaseProvider>\r\n        <View\r\n          style={{\r\n            alignItems: \"flex-end\",\r\n            justifyContent: \"flex-end\",\r\n            marginRight: \"200px\",\r\n          }}\r\n        >\r\n          <Text\r\n            color=\"white\"\r\n            fontSize=\"80\"\r\n            fontFamily=\"PaytoneOne_400Regular\"\r\n            marginTop=\"150px\"\r\n            marginRight=\"50px\"\r\n          >\r\n            Purrrfect Pets!{\" \"}\r\n          </Text>\r\n          <Text color=\"white\" fontSize=\"30\" paddingTop=\"10\" textAlign='center' marginRight=\"120px\" fontFamily='PaytoneOne_400Regular' flexShrink=\"1\">\r\n            Match with and adopt a pet {\"\\n\"}that is most suitable for you\r\n          </Text>\r\n          <Button\r\n            mt=\"2em\"\r\n            mraginTop=\"500px\"\r\n            padding=\"25px 150px\"\r\n            borderRadius=\"30px\"\r\n            backgroundColor=\"#f1c737\"\r\n            marginRight=\"150px\"\r\n            fontFamily=\"Roboto_400Regular\"\r\n            onPress={() => navigation.navigate(\"Login\")}\r\n            title=\"Login In!\"\r\n          >\r\n            <Text color=\"#545871\" fontFamily='Roboto_400Regular'>Login In </Text>\r\n          </Button>\r\n          <Button\r\n            mt=\"2em\"\r\n            padding=\"25px 150px\"\r\n            borderRadius=\"30px\"\r\n            marginRight=\"150px\"\r\n            backgroundColor=\"#f1c737\"\r\n            onPress={() => navigation.navigate(\"Sign Up\")}\r\n            title=\"Sign up\"\r\n          >\r\n            <Text color=\"#545871\" fontFamily='Roboto_400Regular'>Sign Up</Text>\r\n          </Button>\r\n        </View>\r\n      </NativeBaseProvider>\r\n    </ImageBackground>\r\n  );*/\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordVisibility, setPasswordVisibility] = useState(true);\r\n  const [rightIcon, setRightIcon] = useState(\"eye\");\r\n  const [loginError, setLoginError] = useState(\"\");\r\n\r\n  const handlePasswordVisibility = () => {\r\n    if (rightIcon === \"eye\") {\r\n      setRightIcon(\"eye-off\");\r\n      setPasswordVisibility(!passwordVisibility);\r\n    } else if (rightIcon === \"eye-off\") {\r\n      setRightIcon(\"eye\");\r\n      setPasswordVisibility(!passwordVisibility);\r\n    }\r\n  };\r\n\r\n  const onLogin = async () => {\r\n    try {\r\n      if (email !== \"\" && password !== \"\") {\r\n        await auth.createUserWithEmailAndPassword(email, password);\r\n        const currentUser = auth.currentUser;\r\n\r\n        const db = Firebase.firestore();\r\n        db.collection(\"users\").doc(currentUser.uid).set({\r\n          email: currentUser.email,\r\n          /*        lastName: lastName,\r\n          firstName: firstName,*/\r\n        });\r\n      }\r\n    } catch (error) {\r\n      alert(error.message);\r\n      setLoginError();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NativeBaseProvider>\r\n      <View>\r\n        <StatusBar style=\"dark-content\" />\r\n        <Text>Login</Text>\r\n        <Input\r\n          inputStyle={{\r\n            fontSize: 14,\r\n          }}\r\n          containerStyle={{\r\n            backgroundColor: \"#fff\",\r\n            marginBottom: 20,\r\n          }}\r\n          leftIcon=\"email\"\r\n          placeholder=\"Enter email\"\r\n          autoCapitalize=\"none\"\r\n          keyboardType=\"email-address\"\r\n          textContentType=\"emailAddress\"\r\n          autoFocus={true}\r\n          value={email}\r\n          onChangeText={(text) => setEmail(text)}\r\n        />\r\n        <Input\r\n          inputStyle={{\r\n            fontSize: 14,\r\n          }}\r\n          containerStyle={{\r\n            backgroundColor: \"#fff\",\r\n            marginBottom: 20,\r\n          }}\r\n          leftIcon=\"lock\"\r\n          placeholder=\"Enter password\"\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n          secureTextEntry={passwordVisibility}\r\n          textContentType=\"password\"\r\n          rightIcon={rightIcon}\r\n          value={password}\r\n          onChangeText={(text) => setPassword(text)}\r\n          handlePasswordVisibility={handlePasswordVisibility}\r\n        />\r\n        <Button\r\n          onPress={onLogin}\r\n          backgroundColor=\"#f57c00\"\r\n          title=\"Login\"\r\n          tileColor=\"#fff\"\r\n          titleSize={20}\r\n          containerStyle={{\r\n            marginBottom: 24,\r\n          }}\r\n        >\r\n          {\" \"}\r\n          <Text color=\"#545871\" fontFamily=\"Roboto_400Regular\">\r\n            Login In\r\n          </Text>\r\n        </Button>\r\n        <Button\r\n          onPress={() => navigation.navigate(\"Signup\")}\r\n          text=\"Go to Signup\"\r\n          color=\"#fff\"\r\n        >\r\n          {\" \"}\r\n          <Text color=\"#545871\" fontFamily=\"Roboto_400Regular\">\r\n            Sign Up\r\n          </Text>\r\n        </Button>\r\n      </View>\r\n    </NativeBaseProvider>\r\n  );\r\n}\r\nexport default HomeScreen;\r\n"]},"metadata":{},"sourceType":"module"}